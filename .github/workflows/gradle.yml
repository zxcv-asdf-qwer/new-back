name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]

env:
  AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }} #S3 버킷 이름
  AWS_CODE_DEPLOY_NAME: ${{ secrets.AWS_CODE_DEPLOY_NAME }} #CodeDeploy 애플리케이션 이름
  AWS_CODE_DEPLOY_GROUP: ${{ secrets.AWS_CODE_DEPLOY_GROUP }} #CodeDeploy 배포 그룹 이름
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # 2. Spring Boot 애플리케이션 빌드
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set YML
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml &&
          echo "${{ secrets.APPLICATION_YML_COMMON }}" | base64 --decode > src/main/resources/application-common.yml
          find src
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Cleanup Gradle Cache
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
      - name: Publish unit test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          files: build/test-results/**/*.xml
      # AWS 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      #ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      #빌드한 이미지를 ECR로 push
      #CodeDeploy에 필요한 스크립트를 생성 scripts 디렉토리를 생성하고, deploy.sh 파일을 생성하는 과정
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA . > /dev/null 2>&1
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA > /dev/null 2>&1
          touch scripts/deploy.sh
          echo "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY" >> scripts/deploy.sh
          echo "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA" >> scripts/deploy.sh
          echo "docker run -p 8080:8080 -e PROFILE=dev -d --restart always --name compig-back $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA" >> scripts/deploy.sh
      #스크립트들을 압축하여 S3에 업로드
      - name: upload to s3
        run: |
          zip -r deploy-$GITHUB_SHA.zip ./scripts appspec.yml
          aws s3 cp --region ap-northeast-2 --acl private ./deploy-$GITHUB_SHA.zip s3://$AWS_S3_BUCKET_NAME/codedeploy/compig/dev/deploy-$GITHUB_SHA.zip
      #Deploy 시작
      - name: start deploy
        run: |
          aws deploy create-deployment --application-name $AWS_CODE_DEPLOY_NAME \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name $AWS_CODE_DEPLOY_GROUP \
          --s3-location bucket=$AWS_S3_BUCKET_NAME,bundleType=zip,key=codedeploy/compig/dev/deploy-$GITHUB_SHA.zip
  noti:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: www-be
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_DEV }} # required
        if: always() # Pick up events even if the job fails or is canceled.